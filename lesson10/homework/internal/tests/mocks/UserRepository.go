// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	users "homework10/internal/users"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: nickname, email
func (_m *UserRepository) Add(nickname string, email string) (*users.User, error) {
	ret := _m.Called(nickname, email)

	var r0 *users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*users.User, error)); ok {
		return rf(nickname, email)
	}
	if rf, ok := ret.Get(0).(func(string, string) *users.User); ok {
		r0 = rf(nickname, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(nickname, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: userID
func (_m *UserRepository) Delete(userID int64) bool {
	ret := _m.Called(userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Get provides a mock function with given fields: userID
func (_m *UserRepository) Get(userID int64) (*users.User, error) {
	ret := _m.Called(userID)

	var r0 *users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*users.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) *users.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}


// Update provides a mock function with given fields: userID, nickname, email, authorID
func (_m *UserRepository) Update(userID int64, nickname string, email string, authorID int64) (*users.User, error) {
	ret := _m.Called(userID, nickname, email, authorID)

	var r0 *users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string, string, int64) (*users.User, error)); ok {
		return rf(userID, nickname, email, authorID)
	}
	if rf, ok := ret.Get(0).(func(int64, string, string, int64) *users.User); ok {
		r0 = rf(userID, nickname, email, authorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string, string, int64) error); ok {
		r1 = rf(userID, nickname, email, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
