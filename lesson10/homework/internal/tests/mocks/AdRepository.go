// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	ads "homework10/internal/ads"

	mock "github.com/stretchr/testify/mock"
)

// AdRepository is an autogenerated mock type for the AdRepository type
type AdRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: title, text, userID
func (_m *AdRepository) Add(title string, text string, userID int64) (*ads.Ad, error) {
	ret := _m.Called(title, text, userID)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int64) (*ads.Ad, error)); ok {
		return rf(title, text, userID)
	}
	if rf, ok := ret.Get(0).(func(string, string, int64) *ads.Ad); ok {
		r0 = rf(title, text, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int64) error); ok {
		r1 = rf(title, text, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: adID, userID
func (_m *AdRepository) Delete(adID int64, userID int64) bool {
	ret := _m.Called(adID, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64, int64) bool); ok {
		r0 = rf(adID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Get provides a mock function with given fields: adID
func (_m *AdRepository) Get(adID int64) (*ads.Ad, error) {
	ret := _m.Called(adID)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*ads.Ad, error)); ok {
		return rf(adID)
	}
	if rf, ok := ret.Get(0).(func(int64) *ads.Ad); ok {
		r0 = rf(adID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(adID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Idxs provides a mock function with given fields:
func (_m *AdRepository) Idxs() []int64 {
	ret := _m.Called()

	var r0 []int64
	if rf, ok := ret.Get(0).(func() []int64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	return r0
}

// Update provides a mock function with given fields: adID, userID, title, text, published
func (_m *AdRepository) Update(adID int64, userID int64, title string, text string, published bool) (*ads.Ad, error) {
	ret := _m.Called(adID, userID, title, text, published)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64, string, string, bool) (*ads.Ad, error)); ok {
		return rf(adID, userID, title, text, published)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, string, string, bool) *ads.Ad); ok {
		r0 = rf(adID, userID, title, text, published)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, string, string, bool) error); ok {
		r1 = rf(adID, userID, title, text, published)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAdRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdRepository creates a new instance of AdRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdRepository(t mockConstructorTestingTNewAdRepository) *AdRepository {
	mock := &AdRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
